= Basic Syntax :: basicsyntax

このページでは KARAS の基本の構文について解説します。

[[[toc::2]]]





== レベル について :: aboutlevel

KARAS は **?? レベル(Level) ??** という概念を持っています。例えば、KARAS では行頭に ``` = ``` を書くと見出し要素 ``` <h1> ``` を出力しますが、``` == ``` のように記号を2つ書くと、 ``` <h2> ``` を出力します。 ``` = ``` が1つの時を// レベル1 //、``` = ``` が2つの時を// レベル2 //と呼びます。 KARAS では、このように出力結果が変わる単位を// レベル //と定義しています。





== 見出しと区切り :: headinghr

** 行頭に ``` = ``` を書くと見出しを出力します。 **最大レベルは 6 です。構文のレベルが上がるごとに出力される見出しのレベルは1つ下がります。また ``` :: ``` の後に続いて書かれたテキストは // ID // として出力されます。

{{figure
= Input
{{code :: karas
= Heading level 1
== Heading level 2 :: ID
=== Heading level 3
==== Heading level 4
===== Heading level 5
====== Heading level 6
}}
}}

{{figure
= Output
{{code :: html
<h1>Heading level 1</h1>
<h2 id="ID">Heading level 2</h2>
<h3>Heading level 3</h3>
<h4>Heading level 4</h4>
<h5>Heading level 5</h5>
<h6>Heading level 6</h6>
}}
}}

** 行頭に7つ以上 ``` = ``` を書くと水平線を出力します。 **7より上のレベルは、すべて水平線を出力します。``` = ``` の後に続くテキストは出力されません。

{{figure
= Input
{{code :: karas
=======
======== 8
}}
}}

{{figure
= Output
{{code :: html
<hr>
<hr>
}}
}}





== リスト :: list





=== 標準のリスト :: unorderedlist

** 行頭に ``` - ``` を書くとリストを出力します。 **最大レベルはありません。レベルが上がるとリストはネストされます。

{{figure
= Input
{{code :: karas
- Item 1
- Item 2
-- Item 2-1
- Item 3
}}
}}

{{figure
= Output
{{code :: html
<ul>
    <li>Item 1</li>
    <li>Item 2
        <ul>
            <li>Item 2-1</li>
        </ul>
    </li>
    <li>Item 3</li>
</ul>
}}
}}





=== 順序付きのリスト :: orderedlist

** 行頭に ``` + ``` を書くと順序付きのリストを出力します。 **最大レベルはありません。レベルが上がるとリストはネストされます。

{{figure
= Input
{{code :: karas
+ Item 1
++ Item 2
}}
}}

{{figure
= Output
{{code :: html
<ol>
    <li>Item 1
        <ol>
            <li>Item 2</li>
        </ol>
    </li>
</ol>
}}
}}

** リストの開始番号を変更するためには ``` :: ``` を使用します。 **開始番号を指定したリストと同じグループのリストは、再び開始番号が変更されるまで、番号が変更されます。

{{figure
= Input
{{code :: karas
+ Item 1
++ Item 1-5 :: 5
++ Item 1-6
+ Item 2
++ Item 2-1
}}
}}

{{figure
= Output
{{code :: html
 <ol>
    <li>Item 1
        <ol>
            <li value="5">Item 1-5</li>
            <li>Item 1-6</li>
        </ol>
    </li>
    <li>Item 2
        <ol>
            <li>Item 2-1</li>
        </ol>
    </li>
 </ol>
}}
}}





=== 定義リスト :: deflist

** 行頭に ``` ; ``` を書くと定義リストを出力します。 **最大レベルは 2 です。レベル1では定義用語を、レベル2では定義を書きます。定義用語と定義はいくつでも追加することができます。

{{figure
= Input
{{code :: karas
; Definition term
;; Definition description 1
;; Definition description 2
}}
}}

{{figure
= Output
{{code :: html
<dl>
    <dt>Definition term</dt>
    <dd>Definition description 1</dd>
    <dd>Definition description 2</dd>
</dl>
}}
}}





== 装飾と意味の追加 :: inlinemarkup





=== 太字と重要性 :: boldstrong

** テキストを ``` \*\* ``` で閉じると太字として出力します。 **最大レベルは 2 です。レベル1では、テキストは太字として区別されたテキストになります。レベル2では、テキストは強い重要性を持ちます。

{{figure
= Input
{{code :: karas
** Bold text **
*** Strong text ***
}}
}}

{{figure
= Output
{{code :: html
<b>Bold text</b>
<strong>Strong text</strong>
}}
}}





=== 斜体と強調 :: italicemphasize

** テキストを ``` \/\/ ``` で閉じると斜体として出力します。 **最大レベルは 2 です。レベル1では、テキストは区別されたテキストになります。レベル2では、テキストは// 強調されていることを(stress emphasis) //を示します。

{{figure
= Input
{{code :: karas
// Italic text //
/// Emphasized text ///
}}
}}

{{figure
= Output
{{code :: html
<i>Italic text</i>
<em>Emphasized text</em>
}}
}}

ただし、*** http:\/\/ や ftp:/\/\ などの (プロトコルを表す) テキストに含まれる ``` \/\/ ``` は無視されます。***





=== 下線と追加 :: underlineins

** テキストを ``` \_\_ ``` で閉じると下線付きで出力します。 **最大レベルは 2 です。レベル1では装飾だけ持ちます。レベル2では// 追加されたテキスト //の示します。

{{figure
= Input
{{code :: karas
__ Underline text __
___ Inserted text ___
}}
}}

{{figure
= Output
{{code :: html
<u>Underline text</u>
<ins>Inserted text</ins>
}}
}}





=== 打消しと削除 :: strikedel

** テキストを ``` \%\% ``` で閉じると打消し線付きで出力します。 **最大レベルは 2 です。レベル1では装飾だけ適用されます。レベル2では// 削除されたテキスト //を示します。

{{figure
= Input
{{code :: karas
%% Striked text %%
%%% Deleted text %%%
}}
}}

{{figure
= Output
{{code :: html
<s>Striked text</s>
<del>Deleted text</del>
}}
}}





=== 定義用語 :: defabbr

** テキストを ``` \?\? ``` で閉じると定義用語として出力します。 **最大レベルは 2 です。レベル1では定義用語として出力されます。レベル2では定義用語の略語として出力されます。

{{figure
= Input
{{code :: karas
?? Definition text ??
??? Abbreviated definition text ???
}}
}}

{{figure
= Output
{{code :: html
<dfn>Definition text</dfn>
<dfn><abbr>Abbreviated definition text</abbr><dfn>
}}
}}





=== 入力と出力 :: kbdsamp

** テキストを ``` \$\$ ``` で閉じると入力や出力を示すテキストを出力します。 **最大レベルは 2 です。レベル1では、テキストは入力として出力されます。レベル2では、テキストは改行を含まない短い出力として出力されます。この構文でマークアップされたテキストに含まれる &lt; や &gt; などの特定の文字は文字参照に変換されます。

{{figure
= Input
{{code :: karas
$$ < Keyboard text > $$
$$$ > Sample text $$$
}}
}}

{{figure
= Output
{{code :: html
<kbd>&lt; Keyboard text &gt;</kbd>
<samp>&gt; Sample text</samp>
}}
}}





=== 変数とコード :: varcode

** テキストを ``` \`\` ``` で閉じると変数やコードとして出力します。 **最大レベルは 2 です。レベル1では、テキストは変数 (var) として出力されます。レベル2では、テキストは改行を含まない短いコード (code) として出力されます。この構文でマークアップされたテキストに含まれる &lt; や &gt; などの特定の文字は文字参照に変換されます。

{{figure
= Input
{{code :: karas
`` <Variable text> ``
``` > Code text ```
}}
}}

{{figure
= Output
{{code :: html
<var>&lt;Variable text&gt;</var>
<code>&gt; Code text</code>
}}
}}

{{note
レベル1の var 要素は、数式やソースコードの変数、定数などを記述することができます。レベル2の code 要素は XML の要素名や、ソースコードのほかに、ファイル名などを記述することができます。
}}





=== 上付き文字とルビ :: supruby

** テキストを ``` \'\' ``` で閉じると上付き文字として出力します。 **最大レベルは 2 です。レベル1のときは上付き文字を出力します。レベル2のときはルビを出力します。

{{figure
= Input
{{code :: karas
''Superscript text''
}}
}}

{{figure
= Output
{{code :: html
<sup>Superscript text</sup>
}}
}}

ルビの構文はとても特殊な構文です。レベル2の構文を使ってルビを書くときは、それぞれの単語とルビをオプションの構文 ```:: ``` で区切ります。

{{figure
= Input
{{code :: karas
'''KANJI::ruby'''
'''KAN::ru::JI::by'''
}}
}}

{{figure
= Output
{{code :: html
<ruby>KANJI<rp> (</rp><rt>ruby</rt><rp> )</rp></ruby>
<ruby>KAN<rp> (</rp><rt>ru</rt><rp> )</rp>JI<rp> (</rp><rt>by</rt><rp> )</rp></ruby>
}}
}}





=== 下付き文字 :: subscript

** テキストを ``` \,\, ``` で閉じると上付き文字として出力します。**最大レベルは 1 です。

{{figure
= Input
{{code :: karas
,, Subscript text ,,
}}
}}

{{figure
= Output
{{code :: html
<sub>Subscript text</sub>
}}
}}





== 引用と出典 :: quotecite





=== 作品タイトル :: cite

** テキストを ```@@``` で閉じると、作品タイトルを出力します。 **最大レベルは 2 です。レベル1では作品のタイトルを出力します。レベル2では細則 (例えば著作者や免責事項) を出力します。

{{figure
= Input
{{code :: karas
@@ Cite text @@
@@@ features disclaimers, caveats, legal restrictions, or copyrights @@@
}}
}}

{{figure
= Output
{{code :: html
<cite>Cite text</cite>
<small>features disclaimers, caveats, legal restrictions, or copyrights</small>
}}
}}





=== 小さな引用 :: inlinequote

** テキストを ``` \"\" ``` で閉じると、引用したテキストとして出力します。 **最大レベルは 1 です。テキスト中に、セリフや短いテキストを引用するときに使います。

{{figure
= Input
{{code :: karas
"" Quoted text ""
}}
}}

{{figure
= Output
{{code :: html
<q>Quoted text</q>
}}
}}





=== 大きな引用 :: blockquote

** 行頭に ``` > ``` を書くと引用したテキストのブロックを出力します。 ** 最大レベルはありません。レベルが上がると引用テキストはネストされます。改行を含むなどする大きな1つの文章を引用テキストとするときはこの方法を使用します。

{{figure
= Input
{{code :: karas
> Blockquote text,
2nd line.
>> Blockquote text in Blockquote.
>>> Blockquote text in Blockquote.
}}
}}

{{figure
= Output
{{code :: html
<blockquote>
<p>Blockquote text,
 2nd line.</p>
    <blockquote>
    <p>Blockquote text in Blockquote.</p>
        <blockquote>
        <p>Blockquote text in Blockquote.</p>
        </blockquote>
    </blockquote>
</blockquote>
}}
}}





== リンク :: link

**テキストを ```\(\(``` と ```\)\)``` で閉じると、リンクとして出力します。**最大レベルは 2 です。レベル1では一般的なリンクとして出力されます。レベル2では埋め込まれたメディアとして出力されます。

テキストリンク (alias) を書くときは、 オプション構文 ```::``` の後に、そのテキストを書きます。

{{figure
= Input
{{code :: karas
(( URL ))
(( ImageURL.jpg ))
(( URL :: Alias text ))
}}
}}

{{figure
= Output
{{code :: html
<a href="URL">URL</a>
<a href="ImageURL.jpg">ImageURL.jpg</a>
<a href="URL">Alias text</a>
}}
}}

*** レベル2の出力結果は、指定された URL に依存します。 ***URL の末尾の拡張子が画像ファイルを示すときは、出力結果は画像を表示するために最適な形式になります。音声と動画の場合も同じです。これらのメディアにパラメータを追加するときは、 オプションの構文 ```::``` の後に書きます。

{{note
標準のコンバータでは、 オプションの構文 ```::``` に続いて書かれたテキストは、一切変更されずにオプションとして追加されます。 また //obj// などのネストされた要素に対しては、適切なパラメータに変換してから追加します。オプションのテキストは、分割されて、予約されたオプションかどうか解析されます。
}}

画像の場合です。

{{figure
= Input
{{code :: karas
((( ImageURL.jpg )))
((( ImageURL.jpg :: alt="white image" width="100" height="100" )))
}}
}}

{{figure
= Outut
{{code
<img src="ImageURL.jpg">
<img src="ImageURL.jpg" alt="white image" width="100" height="100">
}}
}}

動画の場合です。

{{figure
= Input
{{code :: karas
((( VideoURL.mp4 )))
((( VideoURL.mp4, width="100" height="100" loop controls )))
}}
}}

{{figure
= Output
{{code :: html
<video src="VideoURL.mp4">
    <object data="VideoURL.mp4">
        <embed src="VideoURL.mp4">
    </object>
</video>
<video src="VideoURL.mp4" width="100" height="100" controls>
    <object data="VideoURL.mp4" width="100" height="100">
        <param name="controls" value="true">
        <embed src="VideoURL.mp4" width="100" height="100" controls="true">
    </object>
</video>
}}
}}

音声の場合です。

{{figure
= Input
{{code :: karas
((( AudioURL.mp3 )))
((( AudioURL.mp3 :: loop )))
}}
}}

{{figure
= Output
{{code :: html
<audio src="AudioURL.mp3">
    <object data="AudioURL.mp3">
        <embed src="AudioURL.mp3">
    </object>
</audio>
<audio src="AudioURL.mp3" loop>
    <object data="AudioURL.mp3">
        <param name="loop" value="true">
        <embed src="AudioURL.mp3" loop="true">
    </object>
</audio>
}}
}}

その他の場合です。例えば FLASH(.swf) はその1つです。

{{figure
= Input
{{code :: karas
(((UndefURL.swf)))
(((UndefURL.swf :: width="100" height="100" allowfullscreen)))
}}
}}

{{figure
= Output
{{code :: html
<object data="UndefURL.swf">
    <embed src="UndefURL.swf">
</object>
<object data="UndefURL.swf" width="100" height="100">
    <param name="allowfullscreen" value="true">
    <embed src="UndefURL.swf" width="100" height="100" allowfullscreen="true">
</object>
}}
}}

{{note
出力形式は KARAS が導入されるシステムに依存します。このページでは、KARAS の標準的なコンバータによる変換結果を示しています。正確な情報が必要なときは、そのシステムが提供する変換結果の例を参照してください。開発者は、レベル2の構文が使われるときに、そのメディアに最適化された結果を出力することができるシステムを開発する必要があります。
}}





== テーブル :: table

** 行頭に ``` || ``` を書くとテーブルを出力します。 **同じ行に ``` || ``` を書くと、次のセルを出力します。テーブルの行は、改行によって制御されます。 

スペースの数や ``` || ``` の位置を揃える必要はありません。ただしセルの数が多かったり、セルの中の文字の数がそれぞれ大きく異なるときは可読性のために揃えることを推奨します。

{{figure
= Input
{{code :: karas
|| Cell 1 || Cell 2
|| Cell 3 || Cell 4
}}
}}

{{figure
= Output
{{code :: html
<table>
    <tr><td>Cell 1</td><td>Cell 2</td></tr>
    <tr><td>Cell 3</td><td>Cell 4</td></tr>
</table>
}}
}}

ヘッダを出力するときは、セル構文の左側の記号を変更して ``` !| ``` と書きます。

{{figure
= Input
{{code :: karas
!| Cell 1 !| Cell 2
|| Cell 3 || Cell 4
}}
}}

{{figure
= Output
{{code :: html
<table>
    <tr><th>Cell 1</th><th>Cell 2</th></tr>
    <tr><td>Cell 3</td><td>Cell 4</td></tr>
</table>
}}
}}

左揃えされたセルにするときは、セルの構文の右側の記号を変更して ``` |< ``` と書きます。右揃えのセルにするときは ``` |> ``` と書きます。中央揃えのセルにするときは ``` |= ``` と書きます。また右揃えのヘッダにするときは ``` !> ``` と書きます。

{{note
標準のセルの文字の整列方向は、システムか、あるいは、CSS のようなレイアウト機能よって変更される可能性があります。
}}

{{figure
= Input
{{code :: karas
!| Cell 1 !> Cell 2
|< Cell 3 |= Cell 4
}}
}}

{{figure
= Output
{{code :: html
<table>
    <tr>
        <th>Cell 1</th>
        <th style="text-align:right;">Cell 2</td>
    </tr>
    <tr>
        <td style="text-align:left;">Cell 3</td>
        <td style="text-align:center;">Cell 4</td>
    </tr>
</table>
}}
}}

セルを水平方向に結合するには、セルの中に ```::``` だけを書きます。```::``` が書かれたセルは左側のセルに結合されます。セルを垂直方向に結合するには、セルの中に ``` ::: ``` だけを書きます。```:::``` が書かれたセルは上のセルに結合されます。

{{figure
= Input
{{code :: karas
|| Cell 1 ||  ::    || Cell 2 || Cell 3
|| Cell 4 || Cell 5 ||  :::   || Cell 6
||  :::   || Cell 7 ||  :::   || Cell 8
}}
}}

{{figure
= Output
{{code :: html
<table>
    <tr>
        <td colspan="2">Cell 1</td>
        <td rowspan="3">Cell 2</td>
        <td>Cell 3</td>
    </tr>
    <tr>
        <td rowspan="2">Cell 4</td>
        <td>Cell 5</td>
        <td>Cell 6</td>
    </tr>
    <tr>
        <td>Cell 7</td>
        <td>Cell 8</td>
    </tr>
</table>
}}
}}





== その他 :: others





=== // &lt; // と // &gt; // 記号 :: ltgtmark

構文としてではなく、記号 // &lt; // と // &gt; // を書くためには、``` &lt; ``` や ``` &gt; ```のように、文字参照として書く必要があります。





=== パラグラフ :: paragraph

テキストが特別な記号を行頭に持たないときは、そのテキストは1つのパラグラフとして出力されます。特別な記号は、 ```= + - ; < >``` と、記号の組み合わせ ``` \(\( \|\| |> |< |= !| !> !< != ``` です。

{{figure
= Input
{{code :: karas
This text become a paragraph. 
}}
}}

{{figure
= Output
{{code :: html
<p>This text become a paragraph. </p>
}}
}}

テキストは改行されても1つのパラグラフとして出力されます。1つ以上の空行がテキストの間あるときは、それぞれ異なるパラグラフになります。

{{figure
= Input
{{code :: karas
This text become a paragraph.
2nd line.
 
Paragraph is divided by blank line.
}}
}}

{{figure
= Output
{{code :: html
<p>This text become a paragraph.
2nd line.</p>
<p>Paragraph is divided by blank line.</p>
}}
}}

パラグラフの中で改行が必要なときは、改行の前に ``` ~ ``` を書きます。1つのパラグラフに空行を入れるときは、その行に ``` ~ ``` だけを書きます。

{{figure
= Input
{{code :: karas
This text become a paragraph. ~
2nd line.

This text become a paragraph.~
~ 
2nd line.
}}
}}

{{figure
= Output
{{code :: html
<p> This text become a paragraph.<br> 
2nd line.</p>
 
<p>This text become a paragraph.<br>
<br>
2nd line.</p>
}}
}}





=== コメントアウト :: commentout

**```\#\#``` で閉じられたテキストは出力されません。**最大レベルは1です。

{{figure
= Input
{{code :: karas
## Comment out text ##
}}
}}

{{figure
= Output
{{code :: html
Nothing is output.
}}
}}





=== エスケープ :: escape

**KARAS の構文は、エスケープ ```\\``` (バックスラッシュ / 円マーク) によって無効にすることができます。**例えば ```= ``` から始まるパラグラフを書くときは、```\\=``` と書きます。

{{figure
= Input
{{code :: karas
\= This text become a paragraph.
}}
}}

{{figure
= Output
{{code :: html
<p>= This text become a paragraph.</p>
}}
}}

エスケープは記号を1つだけ無視します。また、エスケープ記号 ```\\``` を書きたいときは、エスケープを2つ書きます。

{{figure
= Input
{{code :: karas
\***Bold text.**
Write a \\ mark.
}}
}}

{{figure
= Output
{{code :: html
*<b>Bold text.</b>
Write a \ mark.
}}
}}